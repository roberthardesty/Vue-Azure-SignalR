// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ipman.core.Utilities;

namespace ipman.core.Migrations
{
    [DbContext(typeof(IPManDataContext))]
    [Migration("20180701173415_Initial_Create")]
    partial class Initial_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ipman.shared.Entity.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<string>("DepartmentName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<Guid>("SiteAccountID");

                    b.HasKey("ID");

                    b.HasIndex("SiteAccountID");

                    b.ToTable("Departments");

                    b.HasData(
                        new { ID = new Guid("e29241de-853c-4a05-9928-1c6ac7f73b25"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), DepartmentName = "I AM THE WALRUS", IsActive = true, LastUpdatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8") }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostTag", b =>
                {
                    b.Property<Guid>("PostID");

                    b.Property<Guid>("TagID");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsActive");

                    b.HasKey("PostID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("PostTag");

                    b.HasData(
                        new { PostID = new Guid("f723bae5-b6c0-43e0-8828-82adb3e9b088"), TagID = new Guid("1a24966b-2979-49f9-8cc4-b21b6449f53e"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = false },
                        new { PostID = new Guid("f723bae5-b6c0-43e0-8828-82adb3e9b088"), TagID = new Guid("221e7112-b974-4269-b3c2-1f9a0c5e8fff"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = false },
                        new { PostID = new Guid("7e6333c5-8223-4ff4-a3f5-27e97fa087a6"), TagID = new Guid("afd3afe9-f67a-47e4-81f2-91efa7a2fccd"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = false },
                        new { PostID = new Guid("8c84658a-2210-4f5d-a7e2-7da2b32e64c3"), TagID = new Guid("09965041-0340-4fc7-82c4-0e65811c2ca2"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = false },
                        new { PostID = new Guid("8c84658a-2210-4f5d-a7e2-7da2b32e64c3"), TagID = new Guid("221e7112-b974-4269-b3c2-1f9a0c5e8fff"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = false }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostWager", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PostID");

                    b.Property<int>("Prediction");

                    b.Property<int?>("RangeLength");

                    b.Property<Guid>("WagerID");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("WagerID");

                    b.ToTable("PostWager");
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccount", b =>
                {
                    b.Property<Guid>("SiteAccountID");

                    b.Property<Guid>("UserAccountID");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMemberOfAllDepartments");

                    b.Property<DateTime>("LastLoginUTC");

                    b.Property<Guid>("RoleID");

                    b.HasKey("SiteAccountID", "UserAccountID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("SiteAccountUserAccount");

                    b.HasData(
                        new { SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), UserAccountID = new Guid("4d8881bd-db0a-4725-9cf0-2c4390013a30"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, IsMemberOfAllDepartments = true, LastLoginUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), RoleID = new Guid("2fa6b838-8b5b-4bb0-b888-ffce4fb7b7b7") },
                        new { SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), UserAccountID = new Guid("f84d5d8f-131e-4554-a45d-e1d03c02bc43"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, IsMemberOfAllDepartments = true, LastLoginUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), RoleID = new Guid("2fa6b838-8b5b-4bb0-b888-ffce4fb7b7b7") }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccountDepartment", b =>
                {
                    b.Property<Guid>("SiteAccountUserAccountID");

                    b.Property<Guid>("DepartmentID");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("SiteAccountUserSiteAccountID");

                    b.Property<Guid?>("SiteAccountUserUserAccountID");

                    b.HasKey("SiteAccountUserAccountID", "DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SiteAccountUserSiteAccountID", "SiteAccountUserUserAccountID");

                    b.ToTable("SiteAccountUserAccountDepartment");

                    b.HasData(
                        new { SiteAccountUserAccountID = new Guid("143bf075-478f-4e1a-b8d8-889be2af42a4"), DepartmentID = new Guid("e29241de-853c-4a05-9928-1c6ac7f73b25"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { SiteAccountUserAccountID = new Guid("f9c6aae5-fe6c-43bf-92b4-bf79ba92d2fe"), DepartmentID = new Guid("e29241de-853c-4a05-9928-1c6ac7f73b25"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Post", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<DateTime?>("EndTimeUTC");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<DateTime?>("LockTimeUTC");

                    b.Property<string>("PostDescription");

                    b.Property<string>("PostTitle");

                    b.Property<Guid>("SiteAccountID");

                    b.Property<DateTime?>("StartTimeUTC");

                    b.Property<Guid>("UserAccountCreatorID");

                    b.HasKey("ID");

                    b.HasIndex("SiteAccountID");

                    b.HasIndex("UserAccountCreatorID");

                    b.ToTable("Posts");

                    b.HasData(
                        new { ID = new Guid("7e6333c5-8223-4ff4-a3f5-27e97fa087a6"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, IsLocked = false, LastUpdatedUTC = new DateTime(2018, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), PostDescription = "Lawyers were not obtained and therefore this endeavor has led to all of us going directly to jail. See you there! Also if you know any lawyers please send me their contact info.", PostTitle = "I BET: All Admins Go Directly To Jail, Do Not Pass GO. Do Not Collect 200 Dollars", SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), UserAccountCreatorID = new Guid("f84d5d8f-131e-4554-a45d-e1d03c02bc43") },
                        new { ID = new Guid("8c84658a-2210-4f5d-a7e2-7da2b32e64c3"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, IsLocked = false, LastUpdatedUTC = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), PostDescription = "How else could this all have been possible?", PostTitle = "I BET: Rob is 80% Wizard", SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), UserAccountCreatorID = new Guid("4d8881bd-db0a-4725-9cf0-2c4390013a30") },
                        new { ID = new Guid("f723bae5-b6c0-43e0-8828-82adb3e9b088"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, IsLocked = false, LastUpdatedUTC = new DateTime(2018, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), PostDescription = "How many kills will mango average on a daily basis for the month of may?", PostTitle = "Average Kills Per Day In The Month May for MANG0", SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), UserAccountCreatorID = new Guid("4d8881bd-db0a-4725-9cf0-2c4390013a30") }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.PostChoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChoiceName");

                    b.Property<int>("ChoiceValue");

                    b.Property<int>("Order");

                    b.Property<Guid>("PostID");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.ToTable("PostChoice");
                });

            modelBuilder.Entity("ipman.shared.Entity.SiteAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<string>("SiteAccountImagePath");

                    b.Property<string>("SiteAccountName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasAlternateKey("SiteAccountName");

                    b.ToTable("SiteAccounts");

                    b.HasData(
                        new { ID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), SiteAccountName = "Awesome Possum Admins" }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("SiteAccountID");

                    b.Property<string>("TagImage");

                    b.Property<string>("TagName");

                    b.HasKey("ID");

                    b.HasIndex("SiteAccountID");

                    b.ToTable("Tags");

                    b.HasData(
                        new { ID = new Guid("afd3afe9-f67a-47e4-81f2-91efa7a2fccd"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), TagImage = "gavel", TagName = "Admin" },
                        new { ID = new Guid("221e7112-b974-4269-b3c2-1f9a0c5e8fff"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), TagImage = "accessibility_new", TagName = "BasedOnUser" },
                        new { ID = new Guid("1a24966b-2979-49f9-8cc4-b21b6449f53e"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), TagImage = "format_list_numbered_rtl", TagName = "PickANumber" },
                        new { ID = new Guid("09965041-0340-4fc7-82c4-0e65811c2ca2"), CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, SiteAccountID = new Guid("4a93afc2-8ef0-4d91-9374-67e60fc336a8"), TagImage = "check_box", TagName = "TrueFalse" }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.UserAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarLink");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("GitHubID");

                    b.Property<string>("GoogleID");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LastLoginProvider");

                    b.Property<DateTime>("LastLoginUTC");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<string>("UserAccountSalt");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new { ID = new Guid("4d8881bd-db0a-4725-9cf0-2c4390013a30"), AvatarLink = "https://lh4.googleusercontent.com/-gPvw9sU8Mpc/AAAAAAAAAAI/AAAAAAAAAOY/HQ2yjXFKeEk/photo.jpg?sz=50", CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), EmailAddress = "budnjoe@gmail.com", FirstName = "rob", IsActive = true, LastLoginProvider = 0, LastLoginUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), LastName = "Hardesty", LastUpdatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), Username = "Trundle" },
                        new { ID = new Guid("f84d5d8f-131e-4554-a45d-e1d03c02bc43"), AvatarLink = "https://lh3.googleusercontent.com/-pu8oCttY3pE/AAAAAAAAAAI/AAAAAAAAAAA/h5YVW6XWCK4/photo.jpg?sz=50", CreatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), EmailAddress = "robert.hardesty.mail@gmail.com", FirstName = "Robert", IsActive = true, LastLoginProvider = 0, LastLoginUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), LastName = "Hardesty", LastUpdatedUTC = new DateTime(2018, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), Username = "DreadPirateRobert" }
                    );
                });

            modelBuilder.Entity("ipman.shared.Entity.Vote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<bool>("IsComment");

                    b.Property<bool>("IsUpTally");

                    b.Property<Guid>("PostID");

                    b.Property<Guid>("UserAccountID");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("ipman.shared.Entity.Wager", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserAccountID");

                    b.Property<int>("WagerAmount");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Wager");
                });

            modelBuilder.Entity("ipman.shared.Entity.Department", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany("Departments")
                        .HasForeignKey("SiteAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostTag", b =>
                {
                    b.HasOne("ipman.shared.Entity.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostWager", b =>
                {
                    b.HasOne("ipman.shared.Entity.Post", "Post")
                        .WithMany("PostWagers")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.Wager", "Wager")
                        .WithMany("PostWagers")
                        .HasForeignKey("WagerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccount", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany("SiteAccountUserAccounts")
                        .HasForeignKey("SiteAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.UserAccount", "UserAccount")
                        .WithMany("SiteAccountUserAccounts")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccountDepartment", b =>
                {
                    b.HasOne("ipman.shared.Entity.Department", "Department")
                        .WithMany("SiteAccountUserAccountDepartments")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.Join.SiteAccountUserAccount", "SiteAccountUser")
                        .WithMany("SiteAccountUserAccountDepartments")
                        .HasForeignKey("SiteAccountUserSiteAccountID", "SiteAccountUserUserAccountID");
                });

            modelBuilder.Entity("ipman.shared.Entity.Post", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany("Posts")
                        .HasForeignKey("SiteAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.UserAccount", "UserAccountCreator")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("UserAccountCreatorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.PostChoice", b =>
                {
                    b.HasOne("ipman.shared.Entity.Post", "Post")
                        .WithMany("PostChoices")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Tag", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany("Tags")
                        .HasForeignKey("SiteAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Vote", b =>
                {
                    b.HasOne("ipman.shared.Entity.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ipman.shared.Entity.UserAccount", "UserAccount")
                        .WithMany("Votes")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ipman.shared.Entity.Wager", b =>
                {
                    b.HasOne("ipman.shared.Entity.UserAccount", "UserAccount")
                        .WithMany("Wagers")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
