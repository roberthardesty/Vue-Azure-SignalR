// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ipman.core.Utilities;

namespace ipman.core.Migrations
{
    [DbContext(typeof(IPManDataContext))]
    partial class IPManDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ipman.shared.Entity.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<string>("DepartmentName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<Guid?>("SiteAccountID");

                    b.HasKey("ID");

                    b.HasIndex("SiteAccountID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostTag", b =>
                {
                    b.Property<Guid>("PostID");

                    b.Property<Guid>("TagID");

                    b.HasKey("PostID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccount", b =>
                {
                    b.Property<Guid>("SiteAccountID");

                    b.Property<Guid>("UserAccountID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMemberOfAllDepartments");

                    b.Property<DateTime>("LastLoginUTC");

                    b.Property<Guid>("RoleID");

                    b.HasKey("SiteAccountID", "UserAccountID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("SiteAccountUserAccount");
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccountDepartment", b =>
                {
                    b.Property<Guid>("SiteAccountUserAccountID");

                    b.Property<Guid>("DepartmentID");

                    b.Property<Guid?>("SiteAccountID");

                    b.Property<Guid?>("SiteAccountUserAccountSiteAccountID");

                    b.Property<Guid?>("SiteAccountUserAccountUserAccountID");

                    b.Property<Guid?>("UserAccountID");

                    b.HasKey("SiteAccountUserAccountID", "DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SiteAccountID");

                    b.HasIndex("UserAccountID");

                    b.HasIndex("SiteAccountUserAccountSiteAccountID", "SiteAccountUserAccountUserAccountID");

                    b.ToTable("SiteAccountUserAccountDepartment");
                });

            modelBuilder.Entity("ipman.shared.Entity.Post", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PostDescription");

                    b.Property<string>("PostTitle");

                    b.HasKey("ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ipman.shared.Entity.SiteAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.Property<string>("SiteAccountName");

                    b.HasKey("ID");

                    b.ToTable("SiteAccounts");
                });

            modelBuilder.Entity("ipman.shared.Entity.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TagName");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ipman.shared.Entity.UserAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarLink");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("GitHubID");

                    b.Property<string>("GoogleID");

                    b.Property<int>("LastLoginProvider");

                    b.Property<DateTime>("LastLoginUTC");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdatedUTC");

                    b.HasKey("ID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("ipman.shared.Entity.Department", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany()
                        .HasForeignKey("SiteAccountID");
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.PostTag", b =>
                {
                    b.HasOne("ipman.shared.Entity.Post", "Post")
                        .WithMany("PostTag")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ipman.shared.Entity.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccount", b =>
                {
                    b.HasOne("ipman.shared.Entity.SiteAccount", "SiteAccount")
                        .WithMany("SiteAccountUserAccount")
                        .HasForeignKey("SiteAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ipman.shared.Entity.UserAccount", "UserAccount")
                        .WithMany("SiteAccountUserAccounts")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ipman.shared.Entity.Join.SiteAccountUserAccountDepartment", b =>
                {
                    b.HasOne("ipman.shared.Entity.Department", "Department")
                        .WithMany("SiteAccountUserAccountDepartment")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ipman.shared.Entity.SiteAccount")
                        .WithMany("SiteAccountUserAccountDepartment")
                        .HasForeignKey("SiteAccountID");

                    b.HasOne("ipman.shared.Entity.UserAccount")
                        .WithMany("SiteAccountUserAccountDepartments")
                        .HasForeignKey("UserAccountID");

                    b.HasOne("ipman.shared.Entity.Join.SiteAccountUserAccount", "SiteAccountUserAccount")
                        .WithMany()
                        .HasForeignKey("SiteAccountUserAccountSiteAccountID", "SiteAccountUserAccountUserAccountID");
                });
#pragma warning restore 612, 618
        }
    }
}
